[Actions]
; common Values for (un)installation
include_insert "common.opsiinc"

if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
	isFatalError
	; Stop process and set installation status to failed
else
	if FileExists("%ScriptPath%\delsub.opsiscript")
		comment "Start uninstall sub section"
		Sub "%ScriptPath%\delsub.opsiscript"
	endif

	Message "Installing %installingProdName% (%installingProdVersion%) 64 Bit..."

	Files_install
	

	comment "Test for installation success"
	if not (FileExists ($PathToExe$))
		logError "Fatal: After Installation " + $PathToExe$ + " could not be found in."
		isFatalError
	else
		set $FileInfoList$ = getFileInfoMap($PathToExe$)
		set $InstalledVersion$ = getValue("FileVersion", $FileInfoList$)
		if ($InstalledVersion$=$Productversion$)
			comment "Successful Installation"
		else
			logError "Fatal: expected version "+ $ProductVersion$ + ", but got " + $InstalledVersion$
			isFatalError
		endif
		
		Registry_install /64Bit

		;patche die Sprachdatei, sodass Greenshot nicht jedes mal nach der Sprache fragt, sondern den eingestellten Standard nimmt
		Patches_language $InstallDir$ + "\" + $IniFile$

		;aktiviere hier die Plugins, welche ausgewählt wurden. Wurden keine Ausgewählt, so sind automatisch alle aktiviert
		Set $PluginList$ = GetProductPropertyList ("allowed-plugins","")
		for %s% in $PluginList$ do sub_concatStrings
		Patches_plugins $InstallDir$ + "\" + $IniFile$

		if $DesktopLink$ = "True"
			comment "Create common desktop link"
        	LinkFolder_create_desktoplink
    	endif
	
		comment "include custom post install file"
		set $CustomPostInstall$ = getProductProperty("custom-post-install","none")
		if not ($CustomPostInstall$ = "none")
			if FileExists("%ScriptPath%\custom\" + $CustomPostInstall$)
				include_insert "%ScriptPath%\custom\" + $CustomPostInstall$	
			endif
		endif
	endif
endif

[Registry_install]
; da wir keinen Installer nehmen, müssen ein paar notwendige Keys angelegt werden, damit sie unter 'Systemeinstellungen' > 'Software und Funktionen' auftaucht
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$ProductName$]
set "DisplayName" = REG_SZ:"$ProductName$ (installed by OPSI)"
set "DisplayVersion" = REG_SZ:"$ProductVersion$"
set "DisplayIcon" = REG_SZ:"$PathToExe$"
set "InstallLocation" = REG_SZ:"$InstallDIR$"
set "UninstallDirectory" = REG_SZ:"$InstallDIR$"
;UninstallString ist der entscheidende Eintrag, damit es überhaupt angezeigt wird!
;da es in diesem Fall keine Deinstallationsroutine gibt, rufen wir ein VBS mit einem Hinweis auf
set "UninstallString" = REG_SZ:'wscript "$InstallDIR$\uninstall.vbs"'
set "NoRepair" = REG_DWORD:0001
set "NoModify" = REG_DWORD:0001

;zu Autostart hinzufügen
openKey [$RegPathAutostart$]
set "Greenshot" = REG_SZ:"$PathToExe$"

[Files_install]
copy -s "%SCRIPTPATH%\files\*.*" "$InstallDir$"
copy "%ScriptPath%\$IniFile$" "$InstallDir$"
copy "%ScriptPath%\uninstall.vbs" "$InstallDir$"

[Patches_language]
change [Core] Language=$language$

[Patches_plugins]
change [Core] IncludePlugins=$allowedPlugins$

[sub_concatStrings]
if not(Trim("%s%") = "")
	Set $allowedPlugins$ = $allowedPlugins$ + "%s%,"
endif

[Linkfolder_create_desktoplink]
set_basefolder common_desktopdirectory
set_subfolder ""

set_link
	name: $ProductName$
	target: $PathToExe$
end_link
